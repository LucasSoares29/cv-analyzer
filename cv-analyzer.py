import streamlit as st
import os
from PyPDF2 import PdfReader
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.schema import StrOutputParser
from dotenv import load_dotenv




def extract_text_from_pdf(pdf_file):
    """Extrai texto de um arquivo PDF"""
    text = ""
    reader = PdfReader(pdf_file)
    for page in reader.pages:
        text += page.extract_text()
    return text

# Sidebar
st.sidebar.title("Analisador de curr√≠culos")
st.sidebar.write("Fa√ßa o upload do seu curr√≠culo abaixo")
curriculo = st.sidebar.file_uploader("Upload do curr√≠culo", type=["pdf"], accept_multiple_files=False)

# Parte principal
descricao_da_vaga = st.text_area("Insira a descri√ß√£o da vaga a seguir", height=400)

if st.button("Analisar curr√≠culo"):
    with st.spinner("Analisando curr√≠culo..."):
        load_dotenv()
        llm = ChatOpenAI(temperature=0, 
                         model="gpt-4o-mini",
                         api_key=os.getenv('OPENAI_API_KEY'))

        prompt = PromptTemplate(
            input_variables=["curriculo", "descricao_vaga"],
            template="""Voc√™ vai receber a descri√ß√£o da experi√™ncia profissional e competencias de um candidato, al√©m da descri√ß√£o da vaga. 
            Sua miss√£o √© fazer uma an√°lise, apontando em formato de bulletpoints os eventuais pontos de match e pontos que √© requisitado na vaga, 
            mas est√° ausente no curr√≠culo do candidato. Monte um plano de a√ß√£o para que o candidato esteja mais aderente √† vaga. 
            No fim responda se o candidato deve ou n√£o se candidatar a vaga baseado na probabilidade de 
            match com a vaga e na an√°lise feita.
            \n
            Descri√ß√£o do curr√≠culo:
            {curriculo}
            \n
            Descri√ß√£o da vaga:
            {descricao_vaga}
            """
        )

        if curriculo is not None:
            texto_curriculo = extract_text_from_pdf(curriculo)
        else:
            st.error("Por favor, fa√ßa o upload do curr√≠culo.")


        if descricao_da_vaga.strip() != "":
            st.session_state.descricao_vaga = descricao_da_vaga

            chain = prompt | llm | StrOutputParser()

            analise = chain.invoke({
                "curriculo": texto_curriculo,
                "descricao_vaga": st.session_state.descricao_vaga
            })

            st.write("ü§ñ An√°lise do Curr√≠culo:")
            st.write(analise)
        else:
            st.error("Por favor, insira a descri√ß√£o da vaga.")

